<?php
// $Id: commerce_product.module,v 1.56 2010/09/20 10:48:08 rszrama Exp $

/**
 * @file
 * Defines the core Commerce product entity, including the entity itself, the
 * bundle definitions (product types), and various API functions to manage
 * products and interact with them through forms and autocompletes.
 */

/**
 * Implements hook_menu().
 */
function commerce_product_menu() {
  $items = array();

  $items['commerce_product/autocomplete'] = array(
    'title' => 'commerce_product autocomplete',
    'page callback' => 'commerce_product_autocomplete',
    'access arguments' => array('access products'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function commerce_product_entity_info() {
  $return = array(
    'commerce_product' => array(
      'label' => t('Product'),
      'controller class' => 'CommerceProductEntityController',
      'base table' => 'commerce_product',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'product_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'commerce_product_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Admin display'),
          'custom settings' => FALSE,
        ),
        'node_teaser' => array(
          'label' => t('Node: Teaser'),
          'custom settings' => TRUE,
        ),
        'node_full' => array(
          'label' => t('Node: Full content'),
          'custom settings' => FALSE,
        ),
        'node_rss' => array(
          'label' => t('Node: RSS'),
          'custom settings' => FALSE,
        ),
      ),
      'creation callback' => '_commerce_product_create',
      'save callback' => 'commerce_product_save',
      'deletion callback' => 'commerce_product_delete',
      'access callback' => 'commerce_product_access',
    ),
  );

  foreach (commerce_product_type_get_name() as $type => $name) {
    $return['commerce_product']['bundles'][$type] = array(
      'label' => $name,
    );
  }

  return $return;
}

/**
 * Implements hook_field_extra_fields().
 */
function commerce_product_field_extra_fields() {
  $extra = array();

  foreach (commerce_product_types() as $type => $product_type) {
    $extra['commerce_product'][$type] = array(
      'form' => array(
        'sku' => array(
          'label' => 'Product SKU',
          'description' => t('Product module SKU form element'),
          'weight' => -10,
        ),
        'title' => array(
          'label' => 'Title',
          'description' => t('Product module title form element'),
          'weight' => -5,
        ),
        'status' => array(
          'label' => 'Status',
          'description' => t('Product module status form element'),
          'weight' => 35,
        ),
      ),
      'display' => array(
        'sku' => array(
          'label' => 'Product SKU',
          'description' => t('The human readable identifier of the product'),
          'weight' => -10,
        ),
        'title' => array(
          'label' => 'Title',
          'description' => t('Full product title'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_views_api().
 */
function commerce_product_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commerce_product') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 */
function commerce_product_permission() {
  $permissions = array(
    'administer products' => array(
      'title' => t('Administer products'),
      'description' => t('Allows users to perform any action on products of any type.'),
      'restrict access' => TRUE,
    ),
    'administer product types' => array(
      'title' => t('Administer product types'),
      'description' => t('Allows users to add product types and configure their fields.'),
      'restrict access' => TRUE,
    ),
    'access products' => array(
      'title' => t('Access products'),
      'description' => t('Allows users to view lists of products in the Store admin and reference lists.'),
    ),
  );

  // Add product type specific permissions. Note that users with administer
  // products permission should have access to do anything the permissions below
  // grant a user to do.
  foreach (commerce_product_type_get_name() as $type => $name) {
    $permissions['create ' . $type . ' products'] = array(
      'title' => t('Create %type products', array('%type' => $name)),
    );
    $permissions['edit any ' . $type . ' product'] = array(
      'title' => t('Edit or delete any %type product', array('%type' => $name)),
    );
    $permissions['edit own ' . $type . ' products'] = array(
      'title' => t('Edit or delete own %type products', array('%type' => $name)),
    );
  }

  return $permissions;
}

/**
 * Returns an initialized product type object.
 */
function commerce_product_type_new() {
  return (object) array(
    'type' => '',
    'name' => '',
    'description' => '',
    'help' => '',
  );
}

/**
 * Saves a product type.
 *
 * This function will either insert a new product type if $product_type->is_new
 * is set or attempt to update an existing product type if it is not. It does
 * not currently support changing the machine-readable name of the product type,
 * nor is this possible through the form supplied by the Product UI module.
 *
 * @param $product_type
 *   The product type object containing the basic properties as initialized in
 *     commerce_product_type_new().
 *
 * @return
 *   The return value of the call to drupal_write_record() to save the product
 *     type, either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *     the type of query performed to save the product type.
 */
function commerce_product_type_save($product_type) {
  $op = drupal_write_record('commerce_product_type', $product_type, empty($product_type->is_new) ? 'type' : array());
  menu_rebuild();

  // If this is a new product type and the insert did not fail...
  if (!empty($product_type->is_new) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('commerce_product', $product_type->type);

    // Add the base_price field to the product type.
    commerce_product_configure_product_type($product_type->type);

    // Notify other modules that a new product type has been created.
    module_invoke_all('commerce_product_type_insert', $product_type);
  }
  else {
    // Notify other modules that an existing product type has been updated.
    module_invoke_all('commerce_product_type_update', $product_type);
  }

  return $op;
}

/**
 * Loads a product type.
 *
 * @param $type
 *   The machine-readable name of the product type.
 */
function commerce_product_type_load($type) {
  return db_query('SELECT * FROM {commerce_product_type} WHERE type = :type', array(':type' => $type))->fetchObject();
}

/**
 * Deletes a product type.
 *
 * @param $type
 *   The machine-readable name of the product type.
 */
function commerce_product_type_delete($type) {
  $product_type = commerce_product_type_load($type);

  db_delete('commerce_product_type')
    ->condition('type', $type)
    ->execute();

  // Rebuild the menu to get rid of this type's product add menu item.
  menu_rebuild();

  // Notify the field API that this bundle has been destroyed.
  field_attach_delete_bundle('commerce_product', $type);

  // Notify other modules that this product type has been deleted.
  module_invoke_all('commerce_product_type_delete', $product_type);
}

/**
 * Returns an array of product type objects keyed by type.
 */
function commerce_product_types() {
  // First check the static cache for a product types array.
  $product_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($product_types)) {
    $product_types = db_query('SELECT * FROM {commerce_product_type}')->fetchAllAssoc('type');
  }

  return $product_types;
}

/**
 * Resets the cached list of product types.
 */
function commerce_product_types_reset() {
  $product_types = &drupal_static('commerce_product_types');
  $product_types = NULL;
}

/**
 * Returns the human readable name of any or all product types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all product type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_product_type_get_name($type = NULL) {
  $product_types = commerce_product_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($product_types[$type])) {
      return $product_types[$type]->name;
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($product_types as $key => $value) {
    $product_types[$key] = $value->name;
  }

  return $product_types;
}

/**
 * Title callback: return the human-readable product type name.
 */
function commerce_product_type_title($product_type) {
  return $product_type->name;
}

/**
 * Returns a path argument from a product type.
 */
function commerce_product_type_to_arg($type) {
  return $type;
}

/**
 * Checks to see if a given product type already exists.
 *
 * @param $type
 *   The string to match against existing types.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the product type exists.
 */
function commerce_product_type_validate_type_unique($type) {
  // Look for a match of the type.
  if ($match_id = db_query('SELECT type FROM {commerce_product_type} WHERE type = :type', array(':type' => $type))->fetchField()) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Ensures a base price field is present on a product type bundle.
 */
function commerce_product_configure_product_type($type) {
  commerce_price_create_instance('base_price', 'commerce_product', $type, t('Price'));
}

/**
 * Returns an initialized product object.
 *
 * @param $type
 *   The machine-readable type of the product.
 *
 * @return
 *   A product object with all default fields initialized.
 */
function commerce_product_new($type = '') {
  return entity_get_controller('commerce_product')->create($type);
}

/**
 * Creation callback for the Entity Metadata module.
 */
function _commerce_product_create($values = array()) {
  // Create a new product of the specified type.
  $product = commerce_product_new($values['type']);
  unset($values['type']);

  $wrapper = entity_metadata_wrapper('commerce_product', $product);

  foreach ($values as $name => $value) {
    $wrapper->$name->set($value);
  }

  return $wrapper;
}

/**
 * Saves a product.
 *
 * @param $product
 *   The full product object to save.
 *
 * @return
 *   The saved product object.
 */
function commerce_product_save($product) {
  return entity_get_controller('commerce_product')->save($product);
}

/**
 * Loads a product by ID.
 */
function commerce_product_load($product_id) {
  $products = commerce_product_load_multiple(array($product_id), array());
  return $products ? reset($products) : FALSE;
}

/**
 * Loads a product by SKU.
 */
function commerce_product_load_by_sku($sku) {
  $products = commerce_product_load_multiple(array(), array('sku' => $sku));
  return $products ? reset($products) : FALSE;
}

/**
 * Loads multiple products by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $product_ids
 *   An array of product IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_product} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal product loading cache.
 *
 * @return
 *   An array of product objects indexed by product_id.
 */
function commerce_product_load_multiple($product_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_product', $product_ids, $conditions, $reset);
}

/**
* Generate an array for rendering the given product.
*
* @param $product
* A fully loaded product object.
* @param $view_mode
* The view mode for displaying the product, 'full', 'node_full',
* 'node_teaser', or 'node_rss'.
*
* @return
* An array as expected by drupal_render().
*/
function commerce_product_build_content($product, $view_mode = 'full', $breadcrumb = TRUE) {
  // Remove previously built content, if it exists.
  $product->content = array();

  // Prepare a reusable array representing the CSS file to attach to the view.
  $attached = array(
    'css' => array(drupal_get_path('module', 'commerce_product_ui') . '/theme/commerce_product.css'),
  );

  // Add the default fields inherent to the product entity.
  $product->content['sku'] = array(
    '#markup' => theme('commerce_product_sku', array('sku' => check_plain($product->sku), 'label' => t('SKU:'), 'product' => $product)),
    '#attached' => $attached,
  );

  // Only display the title and status on the full page view.
  if ($view_mode == 'full') {
    $product->content['title'] = array(
      '#markup' => theme('commerce_product_title', array('title' => check_plain($product->title), 'label' => t('Title:'), 'product' => $product)),
      '#attached' => $attached,
    );

    $product->content['status'] = array(
      '#markup' => theme('commerce_product_status', array('status' => $product->status ? t('Active') : t('Disabled'), 'label' => t('Status:'), 'product' => $product)),
      '#attached' => $attached,
    );
  }

  // Build fields content.
  field_attach_prepare_view('commerce_product', array($product->product_id => $product), $view_mode);
  entity_prepare_view('commerce_product', array($product->product_id => $product));
  $product->content += field_attach_view('commerce_product', $product, $view_mode);

  // Allow modules to make their own additions to the product content.
  module_invoke_all('commerce_product_view', $product, $view_mode);

  // Remove the content array from the product to avoid duplicate rendering.
  $build = $product->content;
  unset($product->content);

  $build += array(
    '#product' => $product,
    '#view_mode' => $view_mode,
  );

  // Allow modules to modify the final build array.
  drupal_alter('commerce_product_view', $build);

  return $build;
}

/**
 * Deletes a product by ID.
 *
 * @param $product_id
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_product_delete($product_id) {
  return commerce_product_delete_multiple(array($product_id));
}

/**
 * Deletes multiple products by ID.
 *
 * @param $product_ids
 *   An array of product IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_product_delete_multiple($product_ids) {
  return entity_get_controller('commerce_product')->delete($product_ids);
}

/**
 * Checks product access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $product
 *   Optionally a product to check access for or for the create operation the
 *   product type. If nothing is given access permissions for all products are returned.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function commerce_product_access($op, $product = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  if (user_access('administer products', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('access products', $account)) {
    return TRUE;
  }

  if (isset($product) && is_string($product) && $op == 'create' && user_access('create ' . $product . ' products', $account)) {
    return TRUE;
  }

  if (isset($product) && ($op == 'update' || $op == 'delete')) {
    if (user_access('edit any ' . $product->type . ' product', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the product uid.
    if ($account->uid && user_access('edit own ' . $product->type . ' products', $account) && $product->uid == $account->uid) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Performs token replacement on a SKU for valid tokens only.
 *
 * TODO: This function currently limits acceptable Tokens to Product ID and type
 * with no ability to use Tokens for the Fields attached to the product. That
 * might be fine for a core Token replacement, but we should at least open the
 * $valid_tokens array up to other modules to enable various Tokens for use.
 *
 * @param $sku
 *   The raw SKU string including any tokens as entered.
 * @param $product
 *   A product object used to perform token replacement on the SKU.
 *
 * @return
 *   The SKU with tokens replaced or else FALSE if it included invalid tokens.
 */
function commerce_product_replace_sku_tokens($sku, $product) {
  // Build an array of valid SKU tokens.
  $valid_tokens = array('product-id', 'type');

  // Ensure that only valid tokens were used.
  $invalid_tokens = FALSE;

  foreach (token_scan($sku) as $type => $token) {
    if ($type !== 'product') {
      $invalid_tokens = TRUE;
    }
    else {
      foreach (array_keys($token) as $value) {
        if (!in_array($value, $valid_tokens)) {
          $invalid_tokens = TRUE;
        }
      }
    }
  }

  // Register the error if an invalid token was detected.
  if ($invalid_tokens) {
    return FALSE;
  }

  return $sku;
}

/**
 * Validates a SKU string for acceptable characters.
 *
 * @param $sku
 *   The SKU string to validate.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the SKU contains valid characters.
 */
function commerce_product_validate_sku_characters($sku) {
  return preg_match('!^[A-Za-z0-9_-]+$!', $sku);
}

/**
 * Checks to see if a given SKU already exists for another product.
 *
 * @param $sku
 *   The string to match against existing SKUs.
 * @param $product_id
 *   The ID of the product the SKU is for; an empty value represents the SKU is
 *     meant for a new product.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the SKU exists for another product.
 */
function commerce_product_validate_sku_unique($sku, $product_id) {
  // Look for an ID of a product matching the supplied SKU.
  if ($match_id = db_query('SELECT product_id FROM {commerce_product} WHERE sku = :sku', array(':sku' => $sku))->fetchField()) {
    // If this SKU is supposed to be for a new product or a product other than
    // the one that matched...
    if (empty($product_id) || $match_id != $product_id) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Callback for getting product properties.
 * @see commerce_product_entity_property_info()
 */
function commerce_product_get_properties($product, array $options, $name) {
  switch ($name) {
    case 'creator':
      return $product->uid;
    case 'edit-url':
      return url('admin/commerce/products/' . $product->product_id . '/edit', $options);
  }
}

/**
 * Callback for setting product properties.
 * @see commerce_product_entity_property_info()
 */
function commerce_product_set_properties($product, $name, $value) {
  if ($name == 'creator') {
    $product->uid = $value;
  }
}

/**
 * Returns output for product autocompletes.
 *
 * The values returned will be keyed by SKU and appear as such in the textfield,
 * even though the preview in the autocomplete list shows "SKU: Title".
 */
function commerce_product_autocomplete($field_name, $string = '') {
  $field = field_info_field($field_name);
  $matches = array();

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($string);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  if (!empty($tag_last)) {
    $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';

    // Determine the type of autocomplete match to use when searching for products.
    $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';

    // Get an array of matching products.
    $products = commerce_product_match_products($field, $tag_last, $match, array(), 10);

    // Loop through the products and convert them into autocomplete output.
    foreach ($products as $product_id => $data) {
      // Add a class wrapper for a few required CSS overrides.
      $matches[$prefix . $data['sku']] = '<div class="reference-autocomplete">' . $data['rendered'] . '</div>';
    }
  }

  drupal_json_output($matches);
}

/**
 * Fetches an array of all products matching the given parameters.
 *
 * This info is used in various places (allowed values, autocomplete results,
 * input validation...). Some of them only need the product_ids, others
 * product_id + titles, others yet product_id + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets calling functions use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter SKUs and titles on (used by autocomplete).
 * @param $match
 *   Operator to match filtered SKUs and titles against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional product ids to lookup (the $string and $match arguments will be
 *   ignored).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid products in the form:
 *   array(
 *     product_id => array(
 *       'product_sku' => The product SKU,
 *       'title' => The product title,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function commerce_product_match_products($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = implode(':', array(
    $field['field_name'],
    $match,
    ($string !== '' ? $string : implode('-', $ids)),
    $limit,
  ));

  if (!isset($results[$cid])) {
    $matches = _commerce_product_match_products_standard($field, $string, $match, $ids, $limit);

    // Store the results.
    $results[$cid] = !empty($matches) ? $matches : array();
  }

  return $results[$cid];
}

/**
 * Helper function for commerce_product_match_products().
 *
 * Returns an array of products matching the specific parameters.
 */
function _commerce_product_match_products_standard($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  // Build the query object with the necessary fields.
  $query = db_select('commerce_product', 'cp');
  $product_id_alias = $query->addField('cp', 'product_id');
  $product_sku_alias = $query->addField('cp', 'sku');
  $product_title_alias = $query->addField('cp', 'title');
  $product_type_alias = $query->addField('cp', 'type');

  // Add a condition to the query to filter by matching product types.
  if (is_array($field['settings']['referenceable_types']) && !empty($field['settings']['referenceable_types'])) {
    $types = array_diff(array_values($field['settings']['referenceable_types']), array(0, NULL));

    // Only filter by type if some types have been specified.
    if (!empty($types)) {
      $query->condition('cp.type', $types, 'IN');
    }
  }

  if ($string !== '') {
    $args = array();

    // Build a where clause matching on either the SKU or title.
    switch ($match) {
      case 'contains':
        $where = '(cp.sku LIKE :sku_match OR cp.title LIKE :title_match)';
        $args['sku_match'] = '%' . $string . '%';
        $args['title_match'] = '%' . $string . '%';
        break;

      case 'starts_with':
        $where = '(cp.sku LIKE :sku_match OR cp.title LIKE :title_match)';
        $args['sku_match'] = $string . '%';
        $args['title_match'] = $string . '%';
        break;

      case 'equals':
      default:
        $where = '(cp.sku = :match OR cp.title = :match)';
        $args['sku_match'] = $string;
        $args['title_match'] = $string;
        break;
    }

    $query->where($where, $args);
  }
  elseif ($ids) {
    // Otherwise add a product_id specific condition if specified.
    $query->condition($product_id_alias, $ids, 'IN', $ids);
  }

  // Order the results by SKU, title, and then product type.
  $query
    ->orderBy($product_sku_alias)
    ->orderBy($product_title_alias)
    ->orderBy($product_type_alias);

  // Add a limit if specified.
  if ($limit) {
    $query->range(0, $limit);
  }

  // Execute the query and build the results array.
  $result = $query->execute();

  $matches = array();

  foreach ($result->fetchAll() as $product) {
    $matches[$product->product_id] = array(
      'sku' => $product->sku,
      'type' => $product->type,
      'title' => $product->title,
      'rendered' => t('@sku: @title', array('@sku' => $product->sku, '@title' => $product->title)),
    );
  }

  return $matches;
}

/**
 * Handler to load the unchanged product variable for rules.
 * @see commerce_product_rules_variables().
 */
function commerce_product_rules_var_unchanged($product) {
  $unchanged = drupal_static('commerce_product_unchanged');
  if (isset($product->product_id) && isset($unchanged[$product->product_id])) {
    return $unchanged[$product->product_id];
  }
}

<?php
// $Id: commerce_payment_null.module,v 1.4 2010/08/09 21:13:56 rszrama Exp $

/**
 * @file
 * Provides a NULL payment method for Drupal Commerce; used for testing.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payment_null_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_payment_null'] = (object) array(
    'title' => t('No payment'),
    'description' => t('No payment necessary.'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payment_null_settings($settings = NULL) {
  $form = array();

  $form['test'] = array(
    '#type' => 'textfield',
    '#title' => t('Test of field'),
    '#default_value' => isset($settings['test']) ? $settings['test'] : '',
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_payment_null_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (isset($order->data['commerce_payment_null'])) {
    $pane_values += $order->data['commerce_payment_null'];
  }

  // Merge in default values.
  $pane_values += array(
    'name' => '',
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $pane_values['name'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_payment_null_submit_form_validate($payment_method, $pane_form, $pane_values, $order) {
  // Throw an error if a name was not provided. Note that we can't use #required
  // on the form element because of the current nature of the checkout form's
  // back button. See: http://drupal.org/node/875220
  if (empty($pane_values['name'])) {
    form_set_error('name', t('You must enter a name.'));

    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_payment_null_submit_form_submit($payment_method, $pane_form, $pane_values, $order) {
  $order->data['commerce_payment_null'] = $pane_values;
}

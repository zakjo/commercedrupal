<?php
// $Id: commerce_line_item.module,v 1.32 2010/09/20 10:48:08 rszrama Exp $

/**
 * @file
 * Defines the core Commerce line item entity and API functions interact with
 * line items on orders.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_line_item_entity_info() {
  $return = array(
    'commerce_line_item' => array(
      'label' => t('Line item'),
      'controller class' => 'CommerceLineItemEntityController',
      'base table' => 'commerce_line_item',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'line_item_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'commerce_line_item_load',
      'view modes' => array(
        'display' => array(
          'label' => t('Display'),
          'custom settings' => FALSE,
        ),
      ),
      'creation callback' => '_commerce_line_item_create',
      'save callback' => 'commerce_line_item_save',
      'deletion callback' => 'commerce_line_item_delete',
      'access callback' => 'commerce_line_item_access',
    ),
  );

  foreach (commerce_line_item_type_get_name() as $type => $name) {
    $return['commerce_line_item']['bundles'][$type] = array(
      'label' => $name,
    );
  }

  return $return;
}

/**
 * Implements hook_field_extra_fields().
 */
function commerce_line_item_field_extra_fields() {
  $extra = array();

  foreach (commerce_line_item_types() as $type => $line_item_type) {
    $extra['commerce_line_item'][$type] = array(
      'form' => array(
        'label' => array(
          'label' => t('Line item label'),
          'description' => t('Line item module label form element'),
          'weight' => -10,
        ),
        'quantity' => array(
          'label' => t('Quantity'),
          'description' => t('Line item module quantity form element'),
          'weight' => -5,
        ),
      ),
      'display' => array(
        'label' => array(
          'label' => t('Line item label'),
          'description' => t('Short descriptive label for the line item'),
          'weight' => -10,
        ),
        'quantity' => array(
          'label' => t('Quantity'),
          'description' => t('Quantity associated with this line item'),
          'weight' => -5,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_theme().
 */
function commerce_line_item_theme() {
  return array(
    'commerce_line_item_manager' => array(
      'render element' => 'form',
    ),
    'commerce_line_item_summary' => array(
      'variables' => array('quantity_raw' => NULL, 'quantity_label' => NULL, 'quantity' => NULL, 'total_raw' => NULL, 'total' => NULL, 'links' => NULL, 'view' => NULL),
      'path' => drupal_get_path('module', 'commerce_line_item') . '/theme',
      'template' => 'commerce-line-item-summary',
    ),
  );
}

/**
 * Adds the necessary CSS for the line item summary template.
 */
function template_preprocess_commerce_line_item_summary(&$variables) {
  drupal_add_css(drupal_get_path('module', 'commerce_line_item') . '/theme/commerce_line_item_summary.css');
}

/**
 * Implements hook_views_api().
 */
function commerce_line_item_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'commerce_line_item') . '/includes/views',
  );
}

/**
 * Implements hook_enable().
 */
function commerce_line_item_enable() {
  // Loop through and configure all the currently defined line item types.
  foreach (commerce_line_item_types() as $line_item_type) {
    commerce_line_item_type_configure($line_item_type);
  }
}

/**
 * Implements hook_modules_enabled().
 */
function commerce_line_item_modules_enabled($modules) {
  // Loop through all the enabled modules.
  foreach ($modules as $module) {
    // If the module implements hook_commerce_line_item()...
    if (module_hook($module, 'commerce_line_item_info')) {
      $line_item_types = module_invoke($module, 'commerce_line_item_info');

      // Loop through and configure the line item types defined by the module.
      foreach ($line_item_types as $line_item_type) {
        commerce_line_item_type_configure($line_item_type);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function commerce_line_item_permission() {
  $permissions = array(
    'administer line item types' => array(
      'title' => t('Administer line item types'),
      'description' => t('View and configure fields attached to module defined line item types.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_field_attach_delete().
 *
 * When an entity is deleted, this hook is invoked so any attached fields can
 * do necessary clean-up. Because line items can't exist apart from a line item
 * reference field, this function checks the entity being deleted for any
 * referenced line items and deletes them.
 */
function commerce_line_item_field_attach_delete($entity_type, $entity) {
  $entity_info = entity_get_info($entity_type);

  // If the entity being deleted has a bundle...
  if (!empty($entity_info['entity keys']['bundle'])) {
    // Extract the bundle name using the specified property.
    $property = $entity_info['entity keys']['bundle'];
    $bundle = $entity->{$property};
  }
  else {
    // Otherwise use the entity type as the bundle name.
    $bundle = $entity_type;
  }

  // Find any line item reference fields on this order and delete the
  // referenced line items.
  $line_item_ids = array();

  foreach (field_info_instances($entity_type, $bundle) as $key => $value) {
    // Only examine line item reference fields using the manager widget.
    if ($value['widget']['type'] == 'commerce_line_item_manager') {
      // Add the IDs of the reference line items to the array.
      foreach ($entity->{$key}[LANGUAGE_NONE] as $item) {
        $line_item_ids[] = $item['line_item_id'];
      }
    }
  }

  // Delete the line items if any were found.
  if (!empty($line_item_ids)) {
    commerce_line_item_delete_multiple($line_item_ids);
  }
}

/**
 * Implements hook_commerce_line_item_delete().
 *
 * When a line item is deleted, any references to the line item should also be
 * deleted. We don't know where these might exist, so we loop through every
 * defined field in search of line item reference fields to purge.
 */
function commerce_line_item_commerce_line_item_delete($line_item) {
  // Find every line item reference field.
  foreach (field_info_fields() as $name => $field) {
    if ($field['type'] == 'commerce_line_item_reference') {
      // Look in the field's data for any entities that reference the line item
      // being deleted.
      $result = db_query('SELECT * FROM {field_data_' . $name . '} AS fd LEFT JOIN {field_config_entity_type} AS fc ON fd.etid = fc.etid WHERE line_items_line_item_id = :line_item_id', array(':line_item_id' => $line_item->line_item_id));

      // If the line item was found referenced by an entity...
      foreach ($result as $row) {
        // Load the entity.
        $entities = entity_load($row->type, array($row->entity_id));
        $entity = $entities[$row->entity_id];

        // Remove the line item from its reference field.
        unset($entity->{$name}[$row->language][$row->delta]);

        // Reset the delta values for referenced line items.
        $entity->{$name}[$row->language] = array_merge($entity->{$name}[$row->language], array());

        // Save the updated field data.
        field_attach_presave($row->type, $entity);
        field_attach_update($row->type, $entity);
      }
    }
  }
}

/**
 * Returns a single line item type object.
 *
 * @param $type
 *   The machine-readable name of the line item type.
 *
 * @return
 *   The specified line item type object or FALSE if it does not exist.
 */
function commerce_line_item_type_load($type) {
  $line_item_types = commerce_line_item_types();

  return isset($line_item_types[$type]) ? $line_item_types[$type] : FALSE;
}

/**
 * Returns an array of line item type objects keyed by type.
 */
function commerce_line_item_types() {
  // First check the static cache for a line item types array.
  $line_item_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($line_item_types)) {
    $line_item_types = module_invoke_all('commerce_line_item_info');
    drupal_alter('commerce_line_item_info', $line_item_types);
  }

  return $line_item_types;
}

/**
 * Resets the cached list of line item types.
 */
function commerce_line_item_types_reset() {
  $line_item_types = &drupal_static('commerce_line_item_types');
  $line_item_types = NULL;
}

/**
 * Returns the human readable name of any or all line item types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all line item type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_line_item_type_get_name($type = NULL) {
  $line_item_types = commerce_line_item_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($line_item_types[$type])) {
      return $line_item_types[$type]->name;
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($line_item_types as $key => $value) {
    $line_item_types[$key] = $value->name;
  }

  return $line_item_types;
}

/**
 * Configures a line item type by calling its configuration callback.
 *
 * @param $line_item_type
 *   The fully loaded line item type object to configure.
 */
function commerce_line_item_type_configure($line_item_type) {
  // Add the default price fields to the line item type.
  $weight = 0;

  foreach (array('unit_price' => t('Unit price'), 'total' => t('Total')) as $name => $label) {
    commerce_price_create_instance($name, 'commerce_line_item', $line_item_type->type, $label, $weight++);
  }

  // If this line item type specifies a configuration callback...
  if (!empty($line_item_type->configuration_callback)) {
    $callback = $line_item_type->configuration_callback;

    // If the function exists, invoke it now.
    if (function_exists($callback)) {
      $callback();
    }
  }
}

/**
 * Title callback: return the human-readable line item type name.
 */
function commerce_line_item_type_title($line_item_type) {
  return $line_item_type->name;
}

/**
 * Returns a path argument from a line item type.
 */
function commerce_line_item_type_to_arg($type) {
  return $type;
}

/**
 * Returns an initialized line item object.
 *
 * @param $type
 *   The machine-readable type of the line item.
 *
 * @return
 *   A line item object with all default fields initialized.
 */
function commerce_line_item_new($type = '') {
  return entity_get_controller('commerce_line_item')->create($type);
}

/**
 * Creation callback for the Entity Metadata module.
 */
function _commerce_line_item_create($values = array()) {
  // Create a new line item of the specified type.
  $line_item = commerce_line_item_new($values['type']);
  unset($values['type']);

  $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  foreach ($values as $name => $value) {
    $wrapper->$name->set($value);
  }

  return $wrapper;
}

/**
 * Saves a line item.
 *
 * @param $line_item
 *   The full line item object to save.
 *
 * @return
 *   The saved line item object.
 */
function commerce_line_item_save($line_item) {
  return entity_get_controller('commerce_line_item')->save($line_item);
}

/**
 * Loads a line item by ID.
 */
function commerce_line_item_load($line_item_id) {
  $line_items = commerce_line_item_load_multiple(array($line_item_id), array());
  return $line_items ? reset($line_items) : FALSE;
}

/**
 * Loads multiple line items by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $line_item_ids
 *   An array of line item IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_line_item} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal line item loading cache.
 *
 * @return
 *   An array of line item objects indexed by line_item_id.
 */
function commerce_line_item_load_multiple($line_item_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_line_item', $line_item_ids, $conditions, $reset);
}

/**
 * Deletes a line_item by ID.
 *
 * @param $line_item_id
 *   The ID of the line_item to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_line_item_delete($line_item_id) {
  return commerce_line_item_delete_multiple(array($line_item_id));
}

/**
 * Deletes multiple line items by ID.
 *
 * @param $line_item_ids
 *   An array of line item IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_line_item_delete_multiple($line_item_ids) {
  return entity_get_controller('commerce_line_item')->delete($line_item_ids);
}

/**
 * Handler to load the unchanged line item variable for rules.
 * @see commerce_line_item_rules_variables().
 */
function commerce_line_item_rules_var_unchanged($line_item) {
  $unchanged = drupal_static('commerce_line_item_unchanged');

  if (isset($line_item->line_item_id) && isset($unchanged[$line_item->line_item_id])) {
    return $unchanged[$line_item->line_item_id];
  }
}

/**
 * Implements hook_field_info().
 */
function commerce_line_item_field_info() {
  return array(
    'commerce_line_item_reference' => array(
      'label' => t('Line item reference'),
      'description' => t('This field stores the ID of a related line item as an integer value.'),
      'default_widget' => 'commerce_line_item_manager',
      'default_formatter' => 'commerce_line_item_reference_view',
      'settings' => array(),
      'property_type' => 'commerce_line_item',
      'property_callbacks' => array('commerce_line_item_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function commerce_line_item_field_schema($field) {
  return array(
    'columns' => array(
      'line_item_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'line_item_id' => array('line_item_id'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_line_item_id': line_item_id is not valid for the field (not a
 *                           valid line item ID).
 */
function commerce_line_item_field_validate($entity_type, $object, $field, $instance, $langcode, $items, &$errors) {
  // Extract line_item_ids to check.
  $line_item_ids = array();

  // First check non-numeric line_item_id's to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['line_item_id'])) {
      if (is_numeric($item['line_item_id'])) {
        $line_item_ids[] = $item['line_item_id'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_line_item_id',
          'message' => t('%name: you have specified an invalid line item for this field.', array('%name' => $instance['label'])),
        );
      }
    }
  }

  // Prevent performance hog if there are no ids to check.
  if ($line_item_ids) {
    $line_items = commerce_line_item_load_multiple($line_item_ids);

    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['line_item_id']) && !isset($line_items[$item['line_item_id']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_line_item_id',
            'message' => t('%name: you have specified an invalid line item for this reference field.', array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function commerce_line_item_field_is_empty($item, $field) {
  // line_item_id = 0 îs empty too, which is exactly what we want.
  return empty($item['line_item_id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_line_item_field_formatter_info() {
  return array(
    'commerce_line_item_reference_view' => array(
      'label' => t('Line item View'),
      'description' => t('Display the line items via a default View.'),
      'field types' => array('commerce_line_item_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_line_item_field_formatter_view($entity_type, $object, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // Collect the list of line item IDs.
  $line_item_ids = array();

  foreach ($items as $delta => $item) {
    $line_item_ids[] = $item['line_item_id'];
  }

  switch ($display['type']) {
    case 'commerce_line_item_reference_view':
      $result[0] = array(
        '#markup' => commerce_embed_view('line_item_table', 'defaults', array(implode(',', $line_item_ids))),
      );

      break;
  }

  return $result;
}

/**
 * Implements hook_field_widget_info().
 *
 * Defines widgets available for use with field types as specified in each
 * widget's $info['field types'] array.
 */
function commerce_line_item_field_widget_info() {
  $widgets = array();

  // Define the creation / reference widget for line items.
  $widgets['commerce_line_item_manager'] = array(
    'label' => t('Line item manager'),
    'description' => t('Use a complex widget to manager the line items referenced by this object.'),
    'field types' => array('commerce_line_item_reference'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 *
 * Used to define the form element for custom widgets.
 */
function commerce_line_item_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Define the complex line item reference field widget.
  if ($instance['widget']['type'] == 'commerce_line_item_manager') {
    $line_item_ids = array();

    // Build an array of line item IDs from this field's values.
    foreach ($items as $item) {
      $line_item_ids[] = $item['line_item_id'];
    }

    // Load the line items for temporary storage in the form array.
    $line_items = commerce_line_item_load_multiple($line_item_ids);

    // Update the base form element array to use the proper theme and validate
    // functions and to include header information for the line item table.
    $element += array(
      '#theme' => 'commerce_line_item_manager',
      '#element_validate' => array('commerce_line_item_manager_validate'),
      '#header' => array(t('Remove'), t('Title'), t('SKU'), t('Qty'), t('Unit Price'), t('Total')),
      '#empty' => t('No line items found.'),
      'line_items' => array(),
    );

    // Add a set of elements to the form for each referenced line item.
    foreach ($line_items as $line_item_id => $line_item) {
      // Store the original line item for later comparison.
      $element['line_items'][$line_item_id]['line_item'] = array(
        '#type' => 'value',
        '#value' => $line_item,
      );

      // This checkbox will be overridden with a clickable delete image.
      $element['line_items'][$line_item_id]['remove'] = array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
      );

      // The display title should come from the line item type.
      $line_item_type = commerce_line_item_type_load($line_item->type);
      $title_callback = $line_item_type->title_callback;

      $element['line_items'][$line_item_id]['title'] = array(
        '#markup' => $title_callback($line_item),
      );

      $element['line_items'][$line_item_id]['line_item_label'] = array(
        '#markup' => check_plain($line_item->line_item_label),
      );

      $element['line_items'][$line_item_id]['quantity'] = array(
        '#type' => 'textfield',
        '#default_value' => round($line_item->quantity),
        '#size' => 4,
      );

      // Retrieve the widget form for just the unit price.
      $widget_form = _field_invoke_default('form', 'commerce_line_item', $line_item, $form, $form_state, array('field_name' => 'unit_price'));

      // Unset the title and description and add it to the line item form.
      unset($widget_form['unit_price'][LANGUAGE_NONE][0]['price']['#title']);
      unset($widget_form['unit_price'][LANGUAGE_NONE][0]['price']['#description']);

      $element['line_items'][$line_item_id]['unit_price'] = $widget_form['unit_price'];

      $element['line_items'][$line_item_id]['total'] = array(
        '#markup' => commerce_currency_format($line_item->total[LANGUAGE_NONE][0]['price'], $line_item->total[LANGUAGE_NONE][0]['currency_code'], $line_item),
      );
    }

    // Prepare a default set of action elements to display beneath the manager.
    $options = commerce_line_item_type_get_name();

    // Only display the line item selector if line item types exist.
    if (!empty($options)) {
      $element['actions']['line_item_type'] = array(
        '#type' => 'select',
        '#options' => commerce_line_item_type_get_name(),
        '#prefix' => '<div class="add-line-item">',
      );
      $element['actions']['line_item_add'] = array(
        '#type' => 'submit',
        '#value' => t('Add line item'),
        '#ajax' => array(
          'callback' => 'commerce_line_item_manager_refresh',
          'wrapper' => 'line-item-manager',
        ),
        '#suffix' => '</div>',
      );
    }

    // If the the form has been instructed to add a line item...
    if (!empty($form_state['line_item_add'])) {
      $element['actions'] = array();

      // Load the info object for the selected line item type.
      $line_item_type = commerce_line_item_type_load($form_state['line_item_add']);

      // Store the line item info object in the form array.
      $element['actions']['line_item_type'] = array(
        '#type' => 'value',
        '#value' => $line_item_type,
      );

      // TODO: What would it look like to use the line item type's add form
      // instead of this custom callback mechanism? Probably better...

      // Retrieve the form element callback for this line item type.
      $callback = $line_item_type->add_form_element_callback;

      // If this type specifies a valid add form callback function...
      if (function_exists($callback)) {
        // Load in the appropriate form elements to the actions array.
        $element['actions'] += $callback();
      }

      // Add a default save button.
      $element['actions']['save_line_item'] = array(
        '#type' => 'submit',
        '#value' => !empty($line_item_type->add_form_submit_value) ? $line_item_type->add_form_submit_value : t('Save'),
        '#ajax' => array(
          'callback' => 'commerce_line_item_manager_refresh',
          'wrapper' => 'line-item-manager',
        ),
      );

      $element['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#ajax' => array(
          'callback' => 'commerce_line_item_manager_refresh',
          'wrapper' => 'line-item-manager',
        ),
      );
    }

    return $element;
  }
}

/**
 * Returns the line item manager element for display via AJAX.
 */
function commerce_line_item_manager_refresh($form, $form_state) {
  return $form['line_items'][$form['line_items']['#language']];
}

/**
 * Themes the line item manager widget form element.
 */
function theme_commerce_line_item_manager($variables) {
  drupal_add_css(drupal_get_path('module', 'commerce_line_item') . '/theme/commerce_line_item.manager.css');

  $form = $variables['form'];
  $rows = array();

  // Add each line item to the table.
  foreach (element_children($form['line_items']) as $line_item_id) {
    $row = array(
      drupal_render($form['line_items'][$line_item_id]['remove']),
      drupal_render($form['line_items'][$line_item_id]['title']),
      drupal_render($form['line_items'][$line_item_id]['line_item_label']),
      drupal_render($form['line_items'][$line_item_id]['quantity']),
      drupal_render($form['line_items'][$line_item_id]['unit_price']),
      drupal_render($form['line_items'][$line_item_id]['total']),
    );

    $rows[] = $row;
  }

  // Setup the table's variables array and build the output.
  $table_variables = array(
    'caption' => check_plain($form['#title']),
    'header' => $form['#header'],
    'rows' => $rows,
    'empty' => $form['#empty'],
  );

  $output = theme('table', $table_variables) . drupal_render($form['actions']);

  return '<div id="line-item-manager">' . $output . '</div>';
}

/**
 * Validation callback for a commerce_line_item_manager element.
 *
 * When the form is submitted, the line item reference field stores the line
 * item IDs as derived from the $element['line_items'] array and updates any
 * referenced line items based on the extra form elements.
 */
function commerce_line_item_manager_validate($element, &$form_state, $form) {
  $value = array();

  // Loop through the line items in the manager table.
  foreach (element_children($element['line_items']) as $line_item_id) {
    // If the line item has been marked for deletion...
    if ($element['line_items'][$line_item_id]['remove']['#value']) {
      // Delete the line item now and don't include it from the $value array.
      commerce_line_item_delete($line_item_id);
    }
    else {
      // Add the line item ID to the current value of the reference field.
      $value[] = array('line_item_id' => $line_item_id);

      // Update the line item based on the values in the additional elements.
      $line_item = clone($element['line_items'][$line_item_id]['line_item']['#value']);

      // Validate the quantity of each line item.
      if (is_numeric($element['line_items'][$line_item_id]['quantity']['#value'])) {
        $line_item->quantity = $element['line_items'][$line_item_id]['quantity']['#value'];
      }
      else {
        $name = implode('][', $element['line_items'][$line_item_id]['quantity']['#parents']);
        form_set_error($name, 'You must specify a positive number for the quantity.');
      }

      // Manually validate the unit price of each line item.
      $unit_price = $form_state['values']['line_items'][$element['#language']]['line_items'][$line_item_id]['unit_price'];

      if (is_numeric($unit_price[$element['#language']][0]['price'])) {
        $line_item->unit_price = $unit_price;
      }
      else {
        $name = implode('][', array_merge($element['line_items'][$line_item_id]['unit_price']['#parents'], array($element['#language'], 0, 'price')));
        form_set_error($name, 'You must enter a numeric value for the unit price.');
      }

      // Only save if values were actually changed.
      if ($line_item != $element['line_items'][$line_item_id]['line_item']['#value']) {
        commerce_line_item_save($line_item);
      }
    }
  }

  // If the "Add line item" button was clicked, store the line item type in the
  // $form_state for the rebuild of the $form array.
  if ($form_state['clicked_button']['#value'] == t('Add line item')) {
    $form_state['line_item_add'] = $element['actions']['line_item_type']['#value'];
  }
  else {
    unset($form_state['line_item_add']);

    // If the save button was clicked from the line item type action form...
    if (array_pop($form_state['clicked_button']['#parents']) == 'save_line_item') {
      $line_item_type = $element['actions']['line_item_type']['#value'];

      // Create the new line item.
      $line_item = commerce_line_item_new($line_item_type->type);

      // Retrieve the form submit callback for this line item type.
      $callback = $line_item_type->add_form_submit_callback;

      // If this type specifies a valid add form callback function...
      if (function_exists($callback)) {
        // Allow the callback to alter data onto the line item to be saved and
        // to return an error message if something goes wrong.
        $error = $callback($line_item, $element, $form_state, $form);
      }
      else {
        // Assume no error if the callback isn't specified but error if the
        // callback is invalid.
        $error = empty($callback) ? FALSE : t('Internal error: could not find the line item add form callback.');
      }

      // If we didn't end up with any errors...
      if (empty($error)) {
        // Save it and add it to the line item reference field's values array.
        $line_item = commerce_line_item_save($line_item);

        $value[] = array('line_item_id' => $line_item->line_item_id);
      }
      else {
        // Otherwise display the error message; note this is not using
        // form_set_error() on purpose, because a failed addition of a line item
        // doesn't affect the rest of the form submission process.
        drupal_set_message($error, 'error');
      }
    }
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function commerce_line_item_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Callback to alter the property info of the reference field.
 *
 * @see commerce_line_item_field_info().
 */
function commerce_line_item_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = str_replace('_', '-', $field['field_name']);
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];
  $property['options list'] = 'entity_metadata_field_options_list';
  unset($property['query callback']);
}

/**
 * Returns the total quantity of line items referenced by a reference field.
 *
 * @param $value
 *   The value array of the field whose line items you want to count.
 * @param $type
 *   Optional type string to filter line items by type before counting.
 * @param $language
 *   The language within the value array to use; defaults to LANGUAGE_NONE.
 *
 * @return
 *   The total quantity of all the matching line items referenced by the field.
 */
function commerce_line_items_quantity($value, $type = '', $language = '') {
  // Return 0 if the $value array is empty.
  if (empty($value)) {
    return 0;
  }

  if (empty($language)) {
    $language = LANGUAGE_NONE;
  }

  // Extract the line item IDs for the language.
  $line_item_ids = array();

  foreach ((array) $value[$language] as $data) {
    $line_item_ids[] = $data['line_item_id'];
  }

  // Sum up the quantity of all matching line items.
  $quantity = 0;

  foreach (commerce_line_item_load_multiple($line_item_ids) as $line_item) {
    if (empty($type) || $line_item->type == $type) {
      $quantity += $line_item->quantity;
    }
  }

  return $quantity;
}

/**
 * Returns the total price and currency  of line items referenced by a field.
 *
 * @param $value
 *   The value array of the field whose line items you want to count.
 * @param $type
 *   Optional type string to filter line items by type before counting.
 * @param $language
 *   The language within the value array to use; defaults to LANGUAGE_NONE.
 *
 * @return
 *   An associative array of containing the total 'price' and 'currency_code' of
 *     the referenced line items.
 */
function commerce_line_items_total($value, $type = '', $language = '') {
  if (empty($language)) {
    $language = LANGUAGE_NONE;
  }

  // Extract the line item IDs for the language.
  $line_item_ids = array();

  foreach ($value[$language] as $data) {
    $line_item_ids[] = $data['line_item_id'];
  }

  // Sum up the total price of all matching line items.
  $total = 0;
  $currency_code = '';

  foreach (commerce_line_item_load_multiple($line_item_ids) as $line_item) {
    if (empty($type) || $line_item->type == $type) {
      // Set the initial currency code.
      if (empty($currency_code)) {
        $currency_code = $line_item->total[$language][0]['currency_code'];
      }
      else {
        // Check to see if the line items or of a mixed currency.
        if ($currency_code != $line_item->total[$language][0]['currency_code']) {
          // TODO: Figure out what to do then!
        }
      }

      $total += $line_item->total[$language][0]['price'];
    }
  }

  return array('price' => $total, 'currency_code' => $currency_code);
}

/**
 * Implements hook_field_views_data_alter().
 *
 * This is a Views hook implemented to enable adding relationships for
 * referenced line items.
 */
function commerce_line_item_field_views_data_alter(&$data, $field, $module) {
  // If the field is a line item reference field...
  if ($field['type'] == 'commerce_line_item_reference') {
    $table = array_shift(array_keys($data));

    // Add the relationship data to the proper line_item_id column.
    foreach (array_keys($data[$table]) as $key) {
      if (strpos($key, '_line_item_id') == strlen($key) - 13) {
        // First indicate this field's table joins to the commerce_line_item table.
        $data[$table]['table']['join']['commerce_line_item'] = array(
          'left_field' => 'line_item_id',
          'field' => $key,
        );

        // Then add the relationship data to the field itself.
        $data[$table][$key]['relationship'] = array(
          'title' => t('Referenced line item'),
          'help' => t('The line item referenced through this field.'),
          'base' => 'commerce_line_item',
          'base field' => 'line_item_id',
          'handler' => 'views_handler_relationship',
          'label' => t('Line Item'),
        );
      }
    }
  }
}
